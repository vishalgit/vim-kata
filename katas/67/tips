Task: Practice project-wide search and navigation in a React application using Telescope and Vim commands.

Project Structure:
src/
  ├── components/
  │   └── UserList/
  │       ├── UserList.tsx
  │       ├── UserCard.tsx
  │       └── types.ts
  ├── utils/
  │   ├── api.ts
  │   ├── error.ts
  │   └── types.ts
  └── config.ts

Exercises:
1. Find Function References:
   - Find all uses of createQueryString
   - Locate all API utility function imports
   - Find components using fetchData

2. Telescope Live Grep (if available):
   - <leader>fg then type 'createQueryString'
   - Search for 'fetchData.*User'
   - Look for all useState hooks

3. Find Files by Pattern:
   - Find all TypeScript type definitions
   - Locate all component files
   - Find test files if they exist

4. Jump to Definition:
   - Go to User type definition
   - Find ApiResponse interface
   - Navigate to error handler

5. Buffer Operations:
   - Open all files containing 'fetch'
   - List buffers with API-related content
   - Switch between implementation and types

Advanced Exercises:
1. Using Quickfix List:
   - Search for all TODO comments
   - Find all function exports
   - Locate all React imports

2. Using Telescope History:
   - <leader>fh to see file history
   - Reopen recently viewed type files
   - Find recent search patterns

Tips:
Standard Vim:
- :vimgrep /pattern/ **/*.ts* for recursive search
- :copen to view results in quickfix
- :cnext and :cprev to navigate results
- gd for go to definition
- gf to go to file under cursor
- <C-o> and <C-i> for jump list navigation

Telescope Specific:
- <leader>fg for live grep
- <leader>ff for file finder
- <leader>fb for open buffers
- <C-q> to send results to quickfix
- <C-v> for vertical split
- <C-t> for new tab

Search Patterns:
- function.*export to find exported functions
- import.*from to find imports
- interface.*{ to find interface definitions
- useState.*< to find typed useState calls 