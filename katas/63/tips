Task: Practice different regex patterns to extract and modify log information.

Exercises:
1. Extract all timestamps (greedy match):
   - /\[.*\]/g
   - Better non-greedy version: /\[.\{-}\]/g

2. Find all ERROR logs (line start/end anchors):
   - /^.*ERROR.*$/

3. Extract user IDs (digit sequences):
   - /user_id=\d\+/
   - Capture group version: /user_id=\(\d\+\)/

4. Find email addresses (word boundaries):
   - /\<[A-Za-z0-9._%+-]\+@[A-Za-z0-9.-]\+\.[A-Za-z]\{2,}\>/

5. Extract session IDs (lookahead/lookbehind):
   - /session=\([a-z0-9]\{6\}\)\ze/

6. Multi-line operations:
   - Find ERROR entries and their next line: /ERROR.*\n.*\n/
   - Join ERROR lines with next line: :g/ERROR/,+1join

Solution steps:
1. Search and highlight:
   - Type / followed by regex
   - Use n/N to navigate matches
   - :set hlsearch to keep highlights

2. Search and replace:
   - :%s/pattern/replacement/g
   - Use \1, \2 etc. for capture groups
   - Add c flag for confirmation: :%s/pattern/replacement/gc

3. Using global command:
   - :g/pattern/d - delete matching lines
   - :g/pattern/t$ - copy matching lines to end
   - :g/pattern/m$ - move matching lines to end

Advanced patterns:
1. Positive lookahead: /user_id=\d\+\(.*session\)\@=/
2. Negative lookahead: /user_id=\d\+\(.*ERROR\)\@!/
3. Zero-width matches: /\(INFO\|ERROR\)\zs.*\ze user_id/
4. Backreferences: :%s/\(user_id=\d\+\).*\1/\1/

Tips:
- Use \v for very magic mode (fewer escapes needed)
- Use \c for case insensitive search
- Use :help pattern for complete regex reference
- Test patterns with :set incsearch 